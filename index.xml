<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whitea&#39;s Blog</title>
    <link>https://blog.whitea.fun/</link>
    <description>Recent content on Whitea&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Mar 2025 11:30:03 +0000</lastBuildDate>
    <atom:link href="https://blog.whitea.fun/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>硬核——你真的搞定Golang接口了么</title>
      <link>https://blog.whitea.fun/posts/golang/interface/</link>
      <pubDate>Sun, 16 Mar 2025 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/golang/interface/</guid>
      <description>&lt;p&gt;编译阶段有变量、类型、方法等，那在运行阶段反射、接口、类型断言这些语言特性或机制是怎么动态的获取数据类型信息呢？今天我们就来聊聊这些问题吧😀&lt;/p&gt;&#xA;&lt;h2 id=&#34;类型系统&#34;&gt;类型系统&lt;/h2&gt;&#xA;&lt;p&gt;首先我们要知道在Go中，这些属于内置类型：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int(32 or 64), int8, int16, int32, int64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uint(32 or 64), uint8(byte), uint16, uint32, uint64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;float32, float64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;complex64, complex128&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;array    -- 固定长度的数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;slice   -- 序列数组&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;map     -- 映射&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chan    -- 管道&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;当然还有自定义类型，比如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-15&#34;&gt;15&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-16&#34;&gt;16&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-17&#34;&gt;17&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// custom type based on int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// that is different from the one below&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// type T = int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// that just a alias for T, it&amp;#39;s type is still int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// struct&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// interface&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nf&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;Go不允许为内置类型添加方法，同时接口类型是无效的方法接收者。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAST授课-从HTTP到RPC &amp; 服务发现与注册</title>
      <link>https://blog.whitea.fun/posts/sast/2025-second-class/</link>
      <pubDate>Wed, 05 Mar 2025 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/sast/2025-second-class/</guid>
      <description>&lt;h2 id=&#34;我想先说说-tcp&#34;&gt;我想先说说 TCP&lt;/h2&gt;&#xA;&lt;p&gt;大家如果在开发时候遇到希望不同进程可以通讯，常用到的就是 Socket 编程，这是一种面向传输层的网络编程方式，无非就是 TCP 或者 UDP。&#xA;大部分人无脑选择 TCP 就好了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/2025-second-class/001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是一种基于字节流的传输方式，就这样一个裸的TCP就可以解决我们收发数据的全部问题了么？&lt;/p&gt;&#xA;&lt;h2 id=&#34;裸tcp的问题&#34;&gt;裸TCP的问题&lt;/h2&gt;&#xA;&lt;p&gt;八股文常背，TCP 是有三个特点，&lt;strong&gt;面向连接、可靠、基于字节流&lt;/strong&gt;&#xA;我们今天重点关注的是基于字节流这个特点&#xA;字节流可以理解成一个双向通道里面流淌的数据，也就是我们常说的二进制数据，说白了也就是一串&lt;code&gt;01&lt;/code&gt;串，纯裸 TCP 在收发这一堆 &lt;code&gt;01&lt;/code&gt; 串的时候是没有任何边界的，&#xA;它根本不知道从哪到哪才是一条完整的消息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/2025-second-class/002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上面这张图就是粘包问题&#xA;因此很显然，纯裸的 TCP 是不适合直接拿过来用的，需要制定一些规则用于区分&lt;strong&gt;消息的边界&lt;/strong&gt;&#xA;比如我们可以把消息封装一下，分为 Header 和 Body, Header 用于存放一些元数据，比如这个消息有多长， Body 用于存放真正的消息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/2025-second-class/003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这样封装方式，只要收发信息的上下游约定好，这就是所谓的协议&#xA;因此基于 TCP 就衍生出很多的协议，比如 HTTP 和 RPC&lt;/p&gt;&#xA;&lt;h2 id=&#34;http-和-rpc&#34;&gt;HTTP 和 RPC&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/2025-second-class/004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;HTTP协议&lt;/strong&gt;：超文本传输协议 （HTTP） 是一种用于传输超媒体文档（如 HTML）的应用层协议。它专为 Web 浏览器和 Web 服务器之间的通信而设计，但也可用于其他目的，例如机器对机器通信、对 API 的编程访问等&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;RPC&lt;/strong&gt;：RPC协议是一种通过网络调用远程服务的方法，使得不同系统间可以像调用本地方法一样进行通信&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这两个都是应用层协议，了解微服务的同学应该知道，常常在服务内部一般都会使用 RPC 协议进行服务间通讯，而不是使用 HTTP。要弄懂这个需要从这两个协议的设计原理出发了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;http-协议&#34;&gt;HTTP 协议&lt;/h2&gt;&#xA;&lt;p&gt;HTTP的请求报文由四部分组成：请求行(request line)、请求头部(header)、空行和请求数据(request data)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/2025-second-class/005.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不过 HTTP 协议不是我们今天的重点&#xA;更多内容可以看 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP&#34;&gt;MDN文档&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAST授课-入门Redis&amp;了解云原生</title>
      <link>https://blog.whitea.fun/posts/sast/2025-first-class/</link>
      <pubDate>Thu, 27 Feb 2025 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/sast/2025-first-class/</guid>
      <description>&lt;h1 id=&#34;入门redis--了解云原生&#34;&gt;入门Redis &amp;amp; 了解云原生&lt;/h1&gt;&#xA;&lt;h2 id=&#34;第一部分redis快速入门&#34;&gt;第一部分：Redis快速入门&lt;/h2&gt;&#xA;&lt;h3 id=&#34;初步认识&#34;&gt;初步认识&lt;/h3&gt;&#xA;&lt;p&gt;Redis 是一个开源（BSD 许可）的，&lt;strong&gt;内存中的键值对（K-V）存储系统&lt;/strong&gt;，它可以用作 数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings），散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询 bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了复制（replication），LUA脚本（Lua scripting），LRU驱动事件（LRU eviction），事务（transactions）和不同级别的磁盘持久化（persistence）， 并通过Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）&lt;/p&gt;&#xA;&lt;p&gt;你得知道：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Redis是Nosql型的非关系型数据库（Nosql：Not Only sql）&lt;/li&gt;&#xA;&lt;li&gt;Redis是基于内存存储的，速度快，当然也支持数据的持久化&lt;/li&gt;&#xA;&lt;li&gt;Redis是在处理客户端请求的时候是单线程的，在处理客户端连接时候使用IO多路复用技术&lt;/li&gt;&#xA;&lt;li&gt;Redis其实是支持事务的，但是一次性、顺序性、排他性的执行队列中的命令，是不支持回滚的，缺乏传统ACID事务的隔离性和持久性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Windows：&lt;/strong&gt; 官方推荐使用WSL2&lt;a href=&#34;https://redis.io/docs/latest/operate/oss_and_stack/install/install-redis/install-redis-on-windows/&#34;&gt;官网指南&lt;/a&gt;，当然也可以在&lt;a href=&#34;https://github.com/tporadowski/redis/releases&#34;&gt;Github&lt;/a&gt;上下载Zip,解压缩到本地，然后在安装目录执行&lt;code&gt;redis-server.exe redis.windows.conf&lt;/code&gt;即可临时启动&#xA;&lt;strong&gt;Linux &amp;amp; Mac：&lt;/strong&gt; 使用包管理器安装即可&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;但待会我们会讲容器技术，这会让Redis的安装使用更加方便😀&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用select切换数据库：&lt;code&gt;select [number]&lt;/code&gt; （redis共16个数据库）&lt;/li&gt;&#xA;&lt;li&gt;查看数据库大小：&lt;code&gt;DBSIZE&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;查看库内容：&lt;code&gt;keys *&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;判断某个值存在：&lt;code&gt;exists key&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;存储数据：&lt;code&gt;set key value&lt;/code&gt;云&lt;/li&gt;&#xA;&lt;li&gt;数据限时：&lt;code&gt;expire key number\setex key number value&lt;/code&gt;限时多少秒后数据失效，&lt;code&gt;ttl key&lt;/code&gt;查询还有多久截止&lt;/li&gt;&#xA;&lt;li&gt;查看key类型：&lt;code&gt;type key&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;删除数据库：&lt;code&gt;flushall or flushdb DbName&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;批量插入、获取：&lt;code&gt;mset k1 v1 k2 v2...\mget k1 k2 k3...&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;五大基本数据类型&#34;&gt;五大基本数据类型&lt;/h3&gt;&#xA;&lt;p&gt;不用记，用的时候查就行🤣&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAST授课-SpringBoot入门</title>
      <link>https://blog.whitea.fun/posts/sast/get-start-with-spring-boot/</link>
      <pubDate>Thu, 21 Nov 2024 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/sast/get-start-with-spring-boot/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;Spring Boot是一个流行的Java框架，用于简化Spring应用程序的创建和部署。它通过提供一个集成的开发环境，使得开发人员能够快速构建高效的应用程序。同时本节课的目的主要在于编码的实践，概念很多，一开始记不住没关系，但一定要跟着写一写！&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么要面向接口编程&#34;&gt;为什么要面向接口编程&lt;/h2&gt;&#xA;&lt;p&gt;面向接口编程（Programming to an Interface）是一种设计理念，在Spring Boot等框架中广泛应用。以下是Spring Boot中面向接口编程的几个重要原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;降低耦合度&lt;/strong&gt;：面向接口编程可以减少模块之间的耦合。通过依赖接口而非具体实现，系统的不同部分可以独立开发和修改，降低了修改某一部分时对其他部分的影响。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;增强可测试性&lt;/strong&gt;：使用接口可以方便地进行单元测试。因为可以轻松地创建接口的模拟实现（Mock），在测试中可以用这些模拟对象替代真实对象，从而隔离测试环境，确保测试的独立性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;提高灵活性，扩展性和可维护性&lt;/strong&gt;：面向接口编程允许在不改变客户端代码的情况下，轻松替换或扩展实现。只需提供新的实现类，而不必修改使用该接口的代码，使得系统更具灵活性。同时当系统的实现细节被封装在接口后，未来的维护和改进工作将更加简单。修改实现不影响接口的定义，减少了维护成本。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;清晰的设计架构&lt;/strong&gt;：接口提供了清晰的契约，使得开发人员能够明确各个模块的功能和责任。这种设计方式也使得团队协作变得更加简单，便于不同开发人员理解系统的整体架构。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;那跟new一个对象有什么区别呢&#34;&gt;那跟new一个对象有什么区别呢？&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;直接使用具体实现&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-13&#34;&gt;13&lt;/a&gt;&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-14&#34;&gt;14&lt;/a&gt;&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EmailService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sendEmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 发送邮件逻辑&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EmailService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;registerUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注册用户逻辑&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendEmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;欢迎注册: &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用接口&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>SAST授课-啥是后端，如何学呢 🤔</title>
      <link>https://blog.whitea.fun/posts/sast/first-lesson/</link>
      <pubDate>Tue, 15 Oct 2024 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/sast/first-lesson/</guid>
      <description>&lt;h2 id=&#34;碎碎念&#34;&gt;碎碎念&lt;/h2&gt;&#xA;&lt;p&gt;首先欢迎大家成功通过笔试面试亦或者是免试进入到SASTWeb研发组，祝愿大家在这里能够学习到自己感兴趣的知识，结识更多志同道合的朋友。但是要记住，&lt;strong&gt;加入SAST，意味着更大的舞台，更多的资源，但并不代表你很厉害。&lt;/strong&gt; 沉下心去学，学习的路真的还挺长的。😵&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是后端&#34;&gt;什么是后端&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;后端是指&lt;strong&gt;一个软件系统的服务器端，也称作服务器端&lt;/strong&gt;。 它是指在一个软件系统中，负责处理数据存储、业务逻辑处理和与&lt;strong&gt;前端&lt;/strong&gt;交互的一部分。 后端通常包括&lt;strong&gt;数据库、服务器、应用程序和其他相关组件。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;比如：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;b站这个页面就是前端展示出来的，但是着其中的每一个词条，视频，数据来源都是来源于后端数据库，然后经过后端程序一些算法逻辑传递给前端进行展示。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/first-lesson/001.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GitHub（全球最大同性交友平台）的登录界面，这个界面就是前端展示的，而当我们输入Username和Password并点击Sign in之后，数据会传递给后端服务器处理，只有当后端服务器校验通过后，才会给前端返回正确的信息，前端才会跳转主页。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/first-lesson/002.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;后端开发用什么语言&#34;&gt;后端开发用什么语言&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;TIOBE Index - TIOBE&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/first-lesson/003.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在国内，Java仍是后端开发的主流语言，凭借其成熟的生态和广泛的社区支持，成为众多企业的首选。在招聘市场上，Java技能依然是后端开发岗位的主要要求。然而，随着云原生技术的发展，Go和Rust等新兴语言也逐渐崛起，特别是在字节跳动、腾讯等大厂，GoLang已经被广泛应用于后端开发。同时，Python、C#和Node.js等语言在特定场景下也发挥着重要作用，丰富了后端开发的语言选择。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/wnm23/article/details/137127781&#34;&gt;主流后端开发语言：JAVA、C、C++、GO、PYTHON对比&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/top-7-programming-languages-for-backend-web-development/&#34;&gt;Top 7 Programming Languages for Backend Web Development - GeeksforGeeks&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们目前的授课计划前期依旧是以Java为主。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习后端然后干嘛&#34;&gt;学习后端然后干嘛&lt;/h2&gt;&#xA;&lt;p&gt;这里有两种不同的情况：一种是你对后端开发感兴趣，想初步了解后端开发的实际工作内容；另一种是你计划在大学期间持续深入学习后端开发，最终达到企业招聘的标准，未来寻找后端开发相关的岗位。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;强烈建议大家尽早规划好自己的大学四年和职业发展方向，无论是考研、保研、本科就业、研究生就业，还是考公、从事科研。目前大部分人最终都会走向就业市场，因此在大学四年内，专注于一个垂直领域并持续深入学习，会让你在校招中更具竞争力。（不要以为找工作还很遥远，现实是如果你仅仅按部就班跟随学校课程，毕业后找到理想工作的难度会非常大。很多人选择考研，其实只是为了暂时逃避就业的压力）&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;此外，建议大家了解一下当前后端开发工程师的行业薪资水平，以便更好地衡量自己的目标和努力方向。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhipin.com/salaryxc/c101190100_p100101.html&#34;&gt;南京Java工资待遇_收入水平-BOSS直聘 (zhipin.com)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;images/first-lesson/004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据许多学长的经验，&lt;strong&gt;对于前后端开发方向的同学来说&lt;/strong&gt;，考研的意义并不如就业那么明显（考研三年所积累的知识和三年实际工作经验相比，差距较大）。很多学长在大三时会主动寻找相关岗位的实习机会，这段实习经历往往会让他们在大四的秋招中对那些没有实习经历的同学形成降维打击，因为企业更倾向于招聘有实习经验的学生。&lt;/p&gt;&#xA;&lt;p&gt;但无论你是打算简单了解后端开发的工作流程，还是计划深入学习并以此为职业发展方向，跟着我们的课程学习都是非常合适的选择！通过这些课程，你可以逐步积累专业知识，为未来的实习或就业打下坚实基础。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;你可以不来上课，可以自学，但是你的进度不可以比我们的课程进度慢，否则你就慢了（&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;学习路线&#34;&gt;学习路线&lt;/h2&gt;&#xA;&lt;p&gt;这里粘贴一份网上的学习路线，还比较全，里面也给到了很多学习资料的推荐。&lt;/p&gt;&#xA;&lt;p&gt;对于纯小白而言（比如我）刚开始是不适合看文档进行学习的，推荐大家跟着一门视频课程进行学习，但在后期要逐渐拓宽自己接受知识的途径，学会看文档高效学习。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liyupi/codefather/blob/main/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.md&#34;&gt;codefather/学习路线/Java学习路线(github.com)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@HusseinShamas/the-roadmap-to-becoming-a-backend-java-developer-d863b2c4e3b3&#34;&gt;The Roadmap to Becoming a Backend Java Developer | by Hussein Shamas | Medium&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;计算机教育中缺失的一课 · the missing semester of your cs education (missing-semester-cn.github.io)&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KMP算法-来自leetcode-28的思考</title>
      <link>https://blog.whitea.fun/posts/alg/kmp/</link>
      <pubDate>Thu, 20 Jun 2024 11:30:03 +0000</pubDate>
      <guid>https://blog.whitea.fun/posts/alg/kmp/</guid>
      <description>&lt;p&gt;本文的思考来自于&lt;code&gt;leetcode-28.找出字符串中第一个匹配项的下标&lt;/code&gt;&lt;a href=&#34;https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/732236/shi-xian-strstr-by-leetcode-solution-ds6y/&#34;&gt;leetcode链接&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是kmp算法&#34;&gt;什么是KMP算法&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;在&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6&#34;&gt;计算机科学&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;中，&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;克努斯-莫里斯-普拉特&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95&#34;&gt;字符串查找算法&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;（英语：Knuth–Morris–Pratt algorithm，简称为&lt;!-- raw HTML omitted --&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;KMP算法&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;）可在一个&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2&#34;&gt;字符串&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;S&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;内查找一个词&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;W&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6&#34;&gt;字符&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;。（引用维基百科）&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Archive</title>
      <link>https://blog.whitea.fun/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.whitea.fun/archives/</guid>
      <description>archives</description>
    </item>
    <item>
      <title>Search</title>
      <link>https://blog.whitea.fun/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.whitea.fun/search/</guid>
      <description>search</description>
    </item>
  </channel>
</rss>
